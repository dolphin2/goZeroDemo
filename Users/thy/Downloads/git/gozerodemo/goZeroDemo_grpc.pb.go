// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: goZeroDemo.proto

package goZeroDemo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoZeroDemoClient is the client API for GoZeroDemo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoZeroDemoClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type goZeroDemoClient struct {
	cc grpc.ClientConnInterface
}

func NewGoZeroDemoClient(cc grpc.ClientConnInterface) GoZeroDemoClient {
	return &goZeroDemoClient{cc}
}

func (c *goZeroDemoClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/goZeroDemo.GoZeroDemo/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoZeroDemoServer is the server API for GoZeroDemo service.
// All implementations must embed UnimplementedGoZeroDemoServer
// for forward compatibility
type GoZeroDemoServer interface {
	Ping(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedGoZeroDemoServer()
}

// UnimplementedGoZeroDemoServer must be embedded to have forward compatible implementations.
type UnimplementedGoZeroDemoServer struct {
}

func (UnimplementedGoZeroDemoServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGoZeroDemoServer) mustEmbedUnimplementedGoZeroDemoServer() {}

// UnsafeGoZeroDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoZeroDemoServer will
// result in compilation errors.
type UnsafeGoZeroDemoServer interface {
	mustEmbedUnimplementedGoZeroDemoServer()
}

func RegisterGoZeroDemoServer(s grpc.ServiceRegistrar, srv GoZeroDemoServer) {
	s.RegisterService(&GoZeroDemo_ServiceDesc, srv)
}

func _GoZeroDemo_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoZeroDemoServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goZeroDemo.GoZeroDemo/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoZeroDemoServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// GoZeroDemo_ServiceDesc is the grpc.ServiceDesc for GoZeroDemo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoZeroDemo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goZeroDemo.GoZeroDemo",
	HandlerType: (*GoZeroDemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GoZeroDemo_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goZeroDemo.proto",
}
